# -*- coding: utf-8 -*-
"""app__.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pR-7xMjwHRg-ZGpXA2qnX-MmAN7NZGkV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

book=pd.read_csv("Books.csv")

book.head()

book.info()

print(book.shape)
print(list(book.columns))

book.isna().sum()

book["Year-Of-Publication"].unique()

i=list(book["Publisher"])
j=list(book['Year-Of-Publication'])
r = {}
for key in i:
    for value in j:
        r[key] = value
        j.remove(value)
        break

r

## Replacing Invalid years with max year
from collections import Counter
count = Counter(book['Year-Of-Publication'])
[k for k, v in count.items() if v == max(count.values())]

pd.set_option('display.max_colwidth', -1)

book.loc[book["Year-Of-Publication"] == 'DK Publishing Inc', :]

book.loc[book.ISBN == '0789466953','Year-Of-Publication'] = 2000
book.loc[book.ISBN == '0789466953','Book-Author'] = "James Buckley"
book.loc[book.ISBN == '0789466953','Publisher'] = "DK Publishing Inc"
book.loc[book.ISBN == '0789466953','Book-Title'] = "DK Readers: Creating the X-Men, How Comic Book...	"

book.loc[book["ISBN"] == '0789466953',:]

book.loc[book.ISBN == '078946697X','Year-Of-Publication'] = 2000
book.loc[book.ISBN == '078946697X','Book-Author'] = "JMichael Teitelbaum"
book.loc[book.ISBN == '078946697X','Publisher'] = "DK Publishing Inc"
book.loc[book.ISBN == '078946697X','Book-Title'] = "DK Readers: Creating the X-Men, How It All Beg..."

book.loc[book.ISBN == '2070426769','Year-Of-Publication'] = 2003
book.loc[book.ISBN == '2070426769','Book-Author'] = "Jean-Marie Gustave Le ClÃ?Â©zio"
book.loc[book.ISBN == '2070426769','Publisher'] = "Gallimard"
book.loc[book.ISBN == '2070426769','Book-Title'] = "Peuple du ciel, suivi de Les Bergers"

## Converting year of publication in Numbers
book['Year-Of-Publication'] = book['Year-Of-Publication'].astype(int)

book.loc[book['Year-Of-Publication'] > 2021, 'Year-Of-Publication'] = 2000
book.loc[book['Year-Of-Publication'] == 0, 'Year-Of-Publication'] = 2000

book.info()

User=pd.read_csv("Users.csv")

User

User["country"]=User.Location.str.split(",",expand=True)[2]

User

User=User.drop(["Location"],axis=1)

len(User["country"].unique())

User.isna().sum()

#age features null percentage=110762/278858=39%

import seaborn as sns
sns.histplot(User["Age"],bins=20)

# from above chat we can consider that most reader is from age group of 25 to 37,therefore iam taking 30. for all null values.

User["Age"].value_counts()# we can see that above 100 all are invalid or outlier and less in number.

User.loc[User["Age"]>100,"Age"]=np.NaN
User.loc[User["Age"]<6,"Age"]=np.NaN

User["Age"].values

User["Age"].fillna(30,inplace = True)

User["Age"]=User["Age"].astype(int)

import seaborn as sns
sns.histplot(User["Age"],bins=10)

User.dropna()#there are only two null value in country therefore droping it

User["country"].value_counts()

rating=pd.read_csv("/content/Ratings.csv")

rating.head()

rating.info()
rating.isnull().sum()

import re
## removing extra characters from ISBN (from ratings dataset) existing in books dataset
bookISBN = book['ISBN'].tolist() 
reg = "[^A-Za-z0-9]" 
for index, row_Value in rating.iterrows():
    z = re.search(reg, row_Value['ISBN'])    
    if z:
        f = re.sub(reg,"",row_Value['ISBN'])
        if f in bookISBN:
            rating.at[index , 'ISBN'] = f

rating

# merging all data sets
dataset = pd.merge(book, rating, on='ISBN', how='inner')
dataset = pd.merge(dataset, User, on='User-ID', how='inner')
dataset.info()

dataset

p = {}
for year in book['Year-Of-Publication']:
    if str(year) not in p:
        p[str(year)] = 0
    p[str(year)] +=1

p = {k:v for k, v in sorted(p.items())}

plt.figure(figsize=(15,6))
sns.countplot(y="Book-Author", data=book,order=book['Book-Author'].value_counts().index[0:10])

plt.figure(figsize=(8,6))
sns.countplot(x="Book-Rating", data=rating)

plt.figure(figsize=(15,8))
sns.countplot(y="country", data=User, order=User['country'].value_counts().index[0:10])
plt.title("No of readers from each country (Top 10)")

plt.figure(figsize=(15,8))
sns.countplot(y="Book-Title", data=dataset, order=dataset['Book-Title'].value_counts().index[0:10])

dataset1=dataset[dataset["Book-Rating"]>8]

dataset1

plt.figure(figsize=(15,6))#8-10 rating author with maxmum count
sns.countplot(y="Book-Author", data=dataset1,order=dataset1['Book-Author'].value_counts().index[0:10])

dataset2=dataset1[dataset1["Age"]<18]

dataset2

plt.figure(figsize=(15,6))#8 to 10 rating author with maxmum count and age between 0 to 18
sns.countplot(y="Book-Title", data=dataset2,order=dataset2['Book-Title'].value_counts().index[0:10])

dataset3=dataset1[dataset1["Age"]>18]

plt.figure(figsize=(15,6))#8 to 10 rating author with maxmum count and age above 18
sns.countplot(y="Book-Title", data=dataset3,order=dataset3['Book-Title'].value_counts().index[0:10])

plt.figure(figsize=(15,6))#8-10 rating author with maxmum count
sns.countplot(y="country", data=dataset1,order=dataset1['country'].value_counts().index[0:10])

#popular based 
def popularity_based(dataframe, n):
    if n >= 1 and n <= len(dataframe):
        data = pd.DataFrame(dataframe.groupby('ISBN')['Book-Rating'].count()).sort_values('Book-Rating', ascending=False).head(n)
        data1=pd.DataFrame(dataframe.groupby('ISBN')['Book-Rating'].unique())
        data2=pd.merge(data,data1, on='ISBN')
        result = pd.merge(data2, book, on='ISBN', left_index = False)
        return result
    return "Invalid number of books entered!!"

number = int(input("Enter number of books to recommend: "))

print("Top", number, "Popular books are: ")
popularity_based(dataset1,5)

popularity_threshold = 50
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
data = (dataset.groupby(by = ['Book-Title'])['Book-Rating'].count().reset_index().
        rename(columns = {'Book-Rating': 'Total-Rating'}))

result = pd.merge(data, dataset, on='Book-Title', left_index = False)
result = result[result['Total-Rating'] >= popularity_threshold]
result = result.reset_index(drop = True)

matrix = result.pivot_table(index = 'Book-Title', columns = 'User-ID', values = 'Book-Rating').fillna(0)
up_matrix = csr_matrix(matrix)

# for the recommdation of books we are taking target varible user-id as 171011 in which he as read --Harry Potter and the Prisoner of Azkaban (Book 3)
# recommeding the follwing books

bookName = input("Enter a book name: ")
model = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model.fit(up_matrix)

distances, indices = model.kneighbors(matrix.loc[bookName].values.reshape(1, -1), n_neighbors =10)
print("\nRecommended books:\n")
for i in range(0, len(distances.flatten())):
    if i > 0:
        print(matrix.index[indices.flatten()[i]])

data2=result[result['Book-Title']=="Harry Potter and the Prisoner of Azkaban (Book 3)"]#getting the details who read Harry Potter and the Prisoner of Azkaban (Book 3)

data3=result[result['Book-Title']=="Harry Potter and the Chamber of Secrets (Book 2)"]#getting the details who read Harry Potter and the Chamber of Secrets (Book 2)

x=set(data2["User-ID"].values)#contain the userid of those who read Harry Potter and the Prisoner of Azkaban (Book 3)
y=set(data3["User-ID"].values)#contain the userid of those who read Harry Potter and the Chamber of Secrets (Book 2)

similar_user=x & y # similar_user means both the user as read that book and given the same rating.
print(similar_user)

result[result["User-ID"]==171011].sort_values('Book-Rating', ascending=False).head(5)

result[result["User-ID"]==232964].sort_values('Book-Rating', ascending=False).head(5)

result[result["User-ID"]==249862].sort_values('Book-Rating', ascending=False).head(5)

result[result["User-ID"]==137742].sort_values('Book-Rating', ascending=False).head(5)

result[result["User-ID"]==30735].sort_values('Book-Rating', ascending=False).head(5)

# i have taken similiar user-id (read the book and given the good rating)(9602,87555,249862,9227,47116) the following are the books

#top book read by user
list=("Harry Potter and the Chamber of Secrets (Book 2)","Harry Potter and the Goblet of Fire (Book 4)","Harry Potter and the Order of the Phoenix (Book 5)","Harry Potter and the Prisoner of Azkaban (Book 3)","Harry Potter and the Sorcerer's Stone (Book 1)","Harry Potter and the Sorcerer's Stone (Book 1)","Life of Pi","Harry Potter and the Chamber of Secrets (Book 2)","The Talisman","Harry Potter and the Prisoner of Azkaban (Book 3)","All Around the Town","House Atreides (Dune: House Trilogy, Book 1)","The Little Prince","All Quiet on the Western Front","One for the Money (A Stephanie Plum Novel)","All I Need Is You","Harry Potter and the Prisoner of Azkaban (Book 3)","The Two Towers (The Lord of the Rings, Part 2)","The Return of the King (The Lord of the Rings, Part 3)","The Fellowship of the Ring (The Lord of the Rings, Part 1)","A Is for Alibi (Kinsey Millhone Mysteries (Paperback))","Imajica","Harry Potter and the Goblet of Fire (Book 4)","Harry Potter and the Order of the Phoenix (Book 5)","Harry Potter and the Sorcerer's Stone (Book 1)")

list#top25 books

import pickle
pickle.dump(matrix,open("books.pk1","wb"))
pickle.dump(model,open("model.pk1","wb"))
pickle.dump(result,open("result.pk1","wb"))

import streamlit as st
import pickle
import pandas as pd
import requests

st.title('books Recommender System')



matrix= pickle.load(open("books.pk1","rb"))
model= pickle.load(open("model.pk1",'rb'))
result= pickle.load(open("result.pk1",'rb'))
def recommend(books):



  distances, indices = model.kneighbors(matrix.loc[books].values.reshape(1, -1), n_neighbors =10)
  print("\nRecommended books:\n")
  for i in range(0, len(distances.flatten())):
    if i > 0:
        print(matrix.index[indices.flatten()[i]]) 



books_list = result['Book-Title'].values
selected_book= st.selectbox('Select a books from drop down',books_list)

st.write('You selected:', selected_book)


if st.button('Show Recommend book'):
    recommended_book_names = recommend(selected_book)
    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        st.text(recommended_book_names[0])
        

    with col2:
        st.text(recommended_book_names[1])
      

    with col3:
        st.text(recommended_book_names[2])
      

    with col4:
        st.text(recommended_book_names[3])
       

    with col5:
        st.text(recommended_book_names[4])